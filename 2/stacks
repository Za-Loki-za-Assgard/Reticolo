using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SimpleAlgorithmsApp
{
    class Program
    {
        public class Node<T>
        {
            public Node(T data)
            {
                Data = data;
            }
            public T Data { get; set; }
            public Node<T> Next { get; set; }
        }
        
        public class NodeStack<T> : IEnumerable<T>
        {
            Node<T> head;
            int count;

            public bool IsEmpty
            {
                get { return count == 0; }
            }
            public int Count
            {
                get { return count; }
            }

            public void Push(T item)
            {
               
                Node<T> node = new Node<T>(item);
                node.Next = head; 
                head = node;
                count++;
            }
            public T Pop()
            {
              
                if (IsEmpty)
                    throw new InvalidOperationException("Стек пуст");
                Node<T> temp = head;
                head = head.Next; 
                count--;
                return temp.Data;
            }
            public T Peek()
            {
                if (IsEmpty)
                    throw new InvalidOperationException("Стек пуст");
                return head.Data;
            }

            IEnumerator IEnumerable.GetEnumerator()
            {
                return ((IEnumerable)this).GetEnumerator();
            }

            IEnumerator<T> IEnumerable<T>.GetEnumerator()
            {
                Node<T> current = head;
                while (current != null)
                {
                    yield return current.Data;
                    current = current.Next;
                }
            }
        }
    
    static void Main(string[] args)
        {
        NodeStack<string> stack = new NodeStack<string>();
        stack.Push("1");
        stack.Push("2");
        stack.Push("3");
        stack.Push("4");

        foreach (var item in stack)
        {
            Console.WriteLine(item);
        }
        Console.WriteLine();
        string header = stack.Peek();
        Console.WriteLine($"Head is: {header}");
        Console.WriteLine();

        header = stack.Pop();
        foreach (var item in stack)
        {
            Console.WriteLine(item);
        }
            Console.ReadKey();
    }
    }
}
